# -*- coding: utf-8 -*-
"""ML Lab 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HGlhm0rm97T8Hcd18kmsOFubJ-YYqWkL
"""

import pandas as pd

# Load dataset
file_path = "/content/car_price_dataset.csv"
df = pd.read_csv(file_path)

# Display first few rows
df.head()

# Print available columns
print(df.columns)

from sklearn.preprocessing import LabelEncoder

# List of categorical columns
categorical_cols = ['Brand', 'Model', 'Fuel_Type', 'Transmission']  # Updated to match dataset

label_encoders = {}

for col in categorical_cols:
    df[col] = df[col].astype(str)  # Ensure they are strings
    label_encoders[col] = LabelEncoder()
    df[col] = label_encoders[col].fit_transform(df[col])

print("Categorical encoding successful!")

# Drop the 'Price' column as it's the target variable
X = df.drop(columns=['Price'])

# Define target variable
y = df['Price']

print("Shape of X (before scaling):", X.shape)
print("Shape of y:", y.shape)

from sklearn.preprocessing import StandardScaler

# Scale numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Feature scaling completed successfully!")
print("Shape of X_scaled:", X_scaled.shape)

import pandas as pd

# Load the dataset again
df = pd.read_csv("/content/car_price_dataset.csv")

# Display the first few rows to confirm
print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Define features (excluding 'Price') and target variable
X = df.drop(columns=['Price'])
y = df['Price']

# Convert categorical columns to numeric using Label Encoding
from sklearn.preprocessing import LabelEncoder

label_encoders = {}
for col in X.select_dtypes(include=['object']).columns:  # Only encode categorical columns
    label_encoders[col] = LabelEncoder()
    X[col] = label_encoders[col].fit_transform(X[col])

# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Confirm shape
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("Train-Test Split successful!")

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Train SVM model
model = SVC(kernel='linear')
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate performance
acc = accuracy_score(y_test, y_pred)
print(f"Accuracy with linear kernel: {acc:.4f}")

kernels = ['linear', 'poly', 'rbf']

for kernel in kernels:
    print(f"\nTraining SVM with {kernel} kernel...")
    model = SVC(kernel=kernel)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    print(f"Accuracy with {kernel} kernel: {acc:.4f}")

C_values = [0.1, 1, 10]
gamma_values = [0.01, 0.1, 1]

for C in C_values:
    for gamma in gamma_values:
        print(f"\nTraining SVM with C={C} and gamma={gamma}...")
        model = SVC(kernel='rbf', C=C, gamma=gamma)
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)

        print(f"Accuracy with C={C} and gamma={gamma}: {acc:.4f}")

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Try different kernels
kernels = ['linear', 'poly', 'rbf']

for kernel in kernels:
    model = SVC(kernel=kernel)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    print(f"Accuracy with {kernel} kernel: {acc:.4f}")

C_values = [0.1, 1, 10]
gamma_values = [0.01, 0.1, 1]

for C in C_values:
    for gamma in gamma_values:
        model = SVC(kernel='rbf', C=C, gamma=gamma)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        print(f"Accuracy with C={C} and gamma={gamma}: {acc:.4f}")





