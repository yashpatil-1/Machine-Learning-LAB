# -*- coding: utf-8 -*-
"""ML Lab9 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hW8BKB7uLdvK7FbV_F-H_HfMeU-q3K5_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load dataset
df = pd.read_csv("/content/car_price_dataset.csv")

# Select numerical features for clustering
X = df.select_dtypes(include=[np.number]).drop(columns=['Price'])  # Exclude target variable

# Scale features for better clustering performance
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Data Preprocessing Complete!")
print("Shape of Processed Data:", X_scaled.shape)

# Set the number of clusters (K)
k = 3  # You can vary this

# Apply K-Means
kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
clusters = kmeans.fit_predict(X_scaled)

# Add cluster labels to original dataset
df['Cluster'] = clusters

print("K-Means Clustering Applied Successfully!")
print(df[['Cluster', 'Price']].head(10))  # Display first 10 cluster assignments

wcss = []  # Within-cluster sum of squares

for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the elbow curve
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('WCSS')
plt.title('Elbow Method to Find Optimal K')
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='X', s=200, c='red', label='Centroids')
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("K-Means Clustering Visualization")
plt.legend()
plt.show()



